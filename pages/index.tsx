import Head from 'next/head'
import { connect } from 'react-redux'
import styled from 'styled-components'
import { useEffect, useState } from 'react'
import gameApi from '../src/api/game'
import { videoGame } from '@/src/types/video-game'
import Tile from '@/src/components/Tile/tile'
import SearchBar from '@/src/components/SearchBar/searchBar'
import GameView from '@/src/components/GameView/gameView'
import { SET_GAMES, TOGGLE_GAME_MODAL } from '@/src/constants/gameConstants'
import { SET_BEARER } from '@/src/constants/authConstants'
import authApi from '@/src/api/authApi'
// import LoadingSpinner from '@/src/components/Spinner/Spinner'

export const Home = ({
  dispatch,
  games,
  openGameModal,
  selectedGame,
  bearerToken,
}: {
  games: Array<videoGame>
  openGameModal: boolean
  selectedGame: videoGame
  bearerToken: string
}) => {
  const [searchedGame, setSearchedGame] = useState<Array<videoGame>>([])

  useEffect(() => {
    let gamesResponse: Array<{}>
    const getGame = async () => {
      authApi.authenticate().then((response) => {
        dispatch({
          type: SET_BEARER,
          payload: response.data,
        })
        gameApi.getPopular(response.data).then((gamesResponse) => {
          console.log(gamesResponse)
          if (gamesResponse.data !== undefined) {
            // could use a thunk here?
            dispatch({ type: SET_GAMES, payload: gamesResponse.data })
          }
        })
      })
    }
    getGame()
  }, [])

  const searchForGame = async (game: string) => {
    if (game.length === 0) {
      setSearchedGame([])
      return
    }
    // TODO make this an action
    const getGame = await gameApi.getGame(bearerToken, game)

    setSearchedGame(getGame)
  }
  console.log(bearerToken)
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <h1>Game Critic</h1>
        <SearchBar onEnter={searchForGame} />
        {openGameModal && (
          <GameView
            bearerToken={bearerToken}
            selectedGame={selectedGame.slug}
            onClick={() =>
              dispatch({ type: TOGGLE_GAME_MODAL, payload: false })
            }
          />
        )}
        {searchedGame?.length !== 0 ? (
          <TileWrapper>
            {searchedGame?.map((gameResult) => (
              <Tile
                name={gameResult.name}
                background_image={
                  gameResult.background_image !== null
                    ? gameResult.background_image
                    : ''
                }
                description_raw={gameResult.description_raw}
                slug={gameResult.slug}
                onClick={() =>
                  dispatch({
                    type: TOGGLE_GAME_MODAL,
                    payload: { open: true, selectedGame: gameResult },
                  })
                }
              />
            ))}
          </TileWrapper>
        ) : (
          <>
            <h2>The Latest Games</h2>
            <TileWrapper>
              {games.map((game) => (
                <Tile
                  onClick={() =>
                    dispatch({
                      type: TOGGLE_GAME_MODAL,
                      payload: { open: true, selectedGame: game },
                    })
                  }
                  slug={game.slug}
                  name={game.name}
                  background_image={
                    game.background_image !== null ? game.background_image : ''
                  }
                  description_raw={game.description_raw}
                />
              ))}
            </TileWrapper>
          </>
        )}
      </Main>
    </>
  )
}

const mapStateToProps = function ({
  gameReducer,
  authReducer,
}: {
  gameReducer: {
    // TODO move to type of reducer
    games: Array<videoGame>
    openGameModal: boolean
    selectedGame: videoGame
  }
  authReducer: {
    bearerToken: string
  }
}) {
  return {
    games: gameReducer.games,
    openGameModal: gameReducer.openGameModal,
    selectedGame: gameReducer.selectedGame,
    bearerToken: authReducer.bearerToken,
  }
}

export default connect(mapStateToProps)(Home)

const Main = styled.main`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 6rem;
`

const TileWrapper = styled.div`
  overflow-y: none;
  display: grid;
  gap: 16px;
  grid-template-columns: repeat(5, 1fr);
`
