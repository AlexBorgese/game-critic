import Head from 'next/head'
import { connect } from 'react-redux'
import styled from 'styled-components'
import { Suspense, useEffect, useState } from 'react'
import gameApi from '../src/api/game'
import { videoGame } from '@/src/types/video-game'
import Tile from '@/src/components/Tile/tile'
import SearchBar from '@/src/components/SearchBar/searchBar'
import GameView from '@/src/components/GameView/gameView'
import { SET_GAMES, TOGGLE_GAME_MODAL } from '@/src/constants/gameConstants'
import LoadingSpinner from '@/src/components/Spinner/Spinner'

export const Home = ({
  dispatch,
  games,
  openGameModal,
  selectedGame,
}: {
  games: Array<videoGame>
  openGameModal: boolean
  selectedGame: videoGame
}) => {
  const [searchedGame, setSearchedGame] = useState<videoGame>()

  useEffect(() => {
    const getGame = async () => {
      const gamesResponse = await gameApi.getPopular()
      if (gamesResponse !== undefined) {
        // could use a thunk here?
        dispatch({ type: SET_GAMES, payload: gamesResponse })
      }
    }
    getGame()
  }, [])

  const searchForGame = async (game: string) => {
    // TODO make this an action
    const getGame = await gameApi.getGame(game)

    setSearchedGame(getGame)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <h1>Game Critic</h1>
        <SearchBar onEnter={searchForGame} />
        {openGameModal && (
          <GameView
            selectedGame={selectedGame.slug}
            onClick={() =>
              dispatch({ type: TOGGLE_GAME_MODAL, payload: false })
            }
          />
        )}
        {searchedGame?.name !== undefined && (
          <Tile
            name={searchedGame.name}
            background_image={searchedGame.background_image}
            description_raw={searchedGame.description_raw}
            onClick={() =>
              dispatch({ type: TOGGLE_GAME_MODAL, payload: false })
            }
          />
        )}
        <Line />
        <h2>The Latest Games</h2>
        <TileWrapper>
          {games.map((game) => (
            <Tile
              onClick={() =>
                dispatch({
                  type: TOGGLE_GAME_MODAL,
                  payload: { open: true, selectedGame: game },
                })
              }
              name={game.name}
              background_image={game.background_image}
              description_raw={game.description_raw}
            />
          ))}
        </TileWrapper>
      </Main>
    </>
  )
}

const mapStateToProps = function ({
  gameReducer,
}: {
  gameReducer: {
    // TODO move to type of reducer
    games: Array<videoGame>
    openGameModal: boolean
    selectedGame: videoGame
  }
}) {
  return {
    games: gameReducer.games,
    openGameModal: gameReducer.openGameModal,
    selectedGame: gameReducer.selectedGame,
  }
}

export default connect(mapStateToProps)(Home)

const Main = styled.main`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 6rem;
`

const Line = styled.span`
  width: 100%;
  margin: 16px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.3);
`

const TileWrapper = styled.div`
  overflow-y: none;
  display: grid;
  gap: 16px;
  grid-template-columns: repeat(5, 1fr);
`
